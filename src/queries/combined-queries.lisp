(in-package :le)

(defun map-marker-init ()
  (prolog-simple "sem_map_inst(MapInst),!,marker_update(object(MapInst))." ))

(defun init-clean-table ()
  (start-ros-node "lisp_ease")
  (register-ros-package "knowrob_robcog")
  (u-load-episodes "/media/hasu/Exte/episodes/Virtual-Games/clean-table/rcg_0/Episodes/")
  (owl-parse "/media/hasu/Exte/episodes/Virtual-Games/clean-table/rcg_0/SemanticMap.owl")
  (connect-to-db "Virtual-Games_clean-table")
  (map-marker-init))

(defun init-set-table ()
  (start-ros-node "lisp_ease")
  (register-ros-package "knowrob_robcog")
  (u-load-episodes "/media/hasu/Exte/episodes/Virtual-Games/table-set/rcg_5/Episodes/")
  (owl-parse "/media/hasu/Exte/episodes/Virtual-Games/table-set/rcg_5/SemanticMap.owl")
  (connect-to-db "Virtual-Games_table-set")
  (map-marker-init))

(defun get-event ()
  (u-occurs "EpInst" "EventInst" "Start" "End"))

(defun get-event-by-type (type)
  (cut:lazy-append
   (event-type "EventInst" (concatenate 'string "knowrob:'" type "'"))
   (event-type "EventInst" (concatenate 'string "knowrob_u:'" type "'"))))

(defun get-all-events (&optional (type NIL))
  (if type
      (cut:force-ll (get-event-by-type type))
      (cut:force-ll (get-event))))

(defun get-poses-from-event ()
  (let ((episode-instance)
        (event-inst)
        (hand-inst)
        (hand-type)
        (obj-acted-on-inst)
        (hand-inst-short)
        (start)
        (end)
        (temp-list)
        (poses-list))
    (progn
      (setq episode-instance (ep-inst "EpInst"))
      (setq event-inst (string (cdaar (event-type "EventInst" "knowrob:'GraspingSomething'"))))
      (setq temp-list (u-occurs episode-instance event-inst "Start" "End"))
      (setq start (string (cdaar temp-list)))
      (setq end (string (cdadar temp-list)))
      (setq obj-acted-on-inst (string (cdaar (rdf-has event-inst "knowrob:'objectActedOn'" "ObjActedOnInst"))))
      (setq hand-inst (string (cdaar (performed-by event-inst "HandInst"))))
      (setq hand-inst-short (string (cdaar (iri-xml-namespace hand-inst  "HandInstShortName"))))
      (setq hand-type (string (cdadar (obj-type "HandInst" "HandType"))))
      (iri-xml-namespace hand-type "HandTypeName")
      (iri-xml-namespace obj-acted-on-inst  "ObjShortName")
      (push (actor-pose episode-instance hand-inst-short start "PoseHandStart") poses-list)
      (push (actor-pose episode-instance hand-inst-short end "PoseHandEnd") poses-list)
      (print poses-list))))
