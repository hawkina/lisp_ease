(in-package :ques)

(defun init-clean-table ()
  (print "start initializing...")
  (print "start a ros node for communication")
  (start-ros-node "lisp_ease")
  (print "register knowrob_roscog package")
  (prolog-simple "register_ros_package(knowrob_robcog).")
  (print "load episodes")
  (prolog-simple "u_load_episodes('/media/hasu/Exte/episodes/Virtual-Games/clean-table/rcg_0/Episodes/').")
  (print "load semantic map")
  (prolog-simple "owl_parse('/media/hasu/Exte/episodes/Virtual-Games/clean-table/rcg_0/SemanticMap.owl').")
  (print " connect to the raw data (raw db)")
  (prolog-simple "connect_to_db('Virtual-Games_clean-table').")
  (print " show the semantic map")
  (prolog-simple "sem_map_inst(MapInst),!,marker_update(object(MapInst)).")
  (print "done initializing."))

(defun grasp-something-pose ()
  (print " Hand, head and object pose at beginning of grasp.")
  (prolog-simple "ep_inst(EpInst).")
  (print " get events which occurred in the episodes")
  (prolog-simple "u_occurs(EpInst, EventInst, Start, End).")
  (print " check for grasping events")
  (prolog-simple "event_type(EventInst, knowrob:'GraspingSomething').")
  (print " check object acted on")
  (prolog-simple "rdf_has(EventInst, knowrob:'objectActedOn', ObjActedOnInst).")
  (print " ===== VIS =====")
  (print "remove previous markers")
  (prolog-simple "u_marker_remove_all.")
  (print " get the hand which perfomed the event")
  (prolog-simple "performed_by(EventInst, HandInst).")
  (print " get the instance short name")
  (prolog-simple " iri_xml_namespace(HandInst,_, HandInstShortName).")
  (print " get the hand instance type")
  (prolog-simple " obj_type(HandInst, HandType).")
  (print " get the type without namespace")
  (prolog-simple " iri_xml_namespace(HandType, _, HandTypeName).")
  (print " append to package")
  (prolog-simple " atom_concat('package://sim/unreal/', HandTypeName, _TempPath), atom_concat(_TempPath, '/', HandModelPath).")
  (print " view hand model" )
  (prolog-simple " view_bones_meshes(EpInst, HandInstShortName, Start, HandModelPath).")
  (print " get obj name without the namespace")
  (prolog-simple " iri_xml_namespace(ObjActedOnInst, _, ObjShortName).")
  (print " get the pose of the actor")
  (prolog-simple " actor_pose(EpInst, ObjShortName, Start, Pose).")
  (print " split pose to location and orientation")
  (prolog-simple " u_split_pose(Pose, Pos, Quat).")
  (print " move marker to pose" )
  (prolog-simple " marker_pose(object(ObjActedOnInst), pose(Pos,Quat)).")
  (print " get the camera instance")
  (prolog-simple " obj_type(CameraInst, knowrob:'CharacterCamera').")
  (print " get obj name without the namespace")
  (prolog-simple " iri_xml_namespace(CameraInst, _, CameraShortName).")
  (print " get the pose of the actor")
  (prolog-simple " actor_pose(EpInst, CameraShortName, Start, PoseC).")
  (print " split pose to location and orientation" )
  (prolog-simple " u_split_pose(PoseC, PosC, QuatC).")
  (print " move marker to pose")
  (prolog-simple " marker_pose(object(CameraInst), pose(PosC,QuatC))."))


(defun test ()
  (prolog-simple "ep_inst(Ep_Inst)"))


